<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_HL_Eligibility_Basis_ABB'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_HL_Eligibility_Basis_ABB</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("");
print("++++> Entering function :: fn_HL_Eligibility_Basis_ABB");

aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;
// This function runs only in case of incomeProgramUsed = (ignoring case) "BANKING SURROGATE" or incomeProgramUsed = (ignoring case) "LOW LTV"
// Applicant in message.request.application.applicants
try{  
  if(aBlazeApplication.businessErrorsFlag = false) then {
    
    totalPerfios is a real initially 0;    

    for each BlazeApplicant  in  BTCommonVar.termInput.blazeApplication.blazeApplicantArray
    do {
      aBlazeApplicant is some BlazeApplicant initially it as a BlazeApplicant;

        incomeProgramUsed is a string;
        incomeProgramUsed = aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.incomeProgram;
        print("----> incomeProgramUsed :: " aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.incomeProgram);

      if(aBlazeApplicant.employmentType =(ignoring case) "SENP" 
         and incomeProgramUsed <> unknown 
         and (incomeProgramUsed = (ignoring case) "BANKING SURROGATE" or incomeProgramUsed = (ignoring case) "LOW LTV")) then {

        totalInstallmentAmount is a real initially 0;
        for each BankingDetails in aBlazeApplicant.bankingDetails
        do {
          for each ExternalLiabilities in it.externalLiabilities
          do{
            
           if(it.installmentAmount.amount<>unknown and it.emiConsideredForFoir = true ) then  {
      //Added  by Ankit      
            print("---->Ankit  emiConsideredForFoir :: " it.emiConsideredForFoir); 
               print("---->Ankit inside if  emiConsideredForFoir :: " it.emiConsideredForFoir);
            totalInstallmentAmount = totalInstallmentAmount + it.installmentAmount.amount;
                print("---->Ankit  post addition  emiConsideredForFoir :: " it.emiConsideredForFoir);
          }
          }     
        }
        print("----> totalInstallmentAmount :: " totalInstallmentAmount);

        // HL_SENP_FOIR_Offer_Matrix_Instance
        print("----> purposeOfLoanOthers :: " aBlazeApplicant.applicantAdditionalDetails.additionalDetail.purposeOfLoanOthers);
        print("----> incomeProgram :: " aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.incomeProgram);
        print("----> loanAmount :: " aBlazeApplication.loanBasicDetail.keyDetails.loanAmount);
//added by Ankit
        aBlazeApplicant.applicantAdditionalDetails.additionalDetail.purposeOfLoanOthers = aBlazeApplication.loanBasicDetail.sourcingDetails.purposeOfLoan;
        print("----> purposeOfLoanOthers application :: " aBlazeApplicant.applicantAdditionalDetails.additionalDetail.purposeOfLoanOthers);
        print("----> purposeOfLoanOthers applicant :: " aBlazeApplication.loanBasicDetail.sourcingDetails.purposeOfLoan);
        if(aBlazeApplicant.applicantAdditionalDetails.additionalDetail.purposeOfLoanOthers <> unknown 
           and aBlazeApplicant.applicantAdditionalDetails.additionalDetail.purposeOfLoanOthers <> ""
           and aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.incomeProgram <> unknown
           and aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.incomeProgram <> ""
           and aBlazeApplication.loanBasicDetail.keyDetails.loanAmount <> unknown) then {
          HL_SENP_FOIR_Offer_Matrix_Instance(aBlazeApplicant, aBlazeApplication);      
        }

        print("----> aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.overrideAbbEmiRatio :: " aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.overrideAbbEmiRatio);
        if(aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.overrideAbbEmiRatio <> unknown and aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.overrideAbbEmiRatio <> "") then { 
          if(aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.overrideAbbEmiRatio as a real > 0) then {
            aBlazeApplicant.maxAbbEmiRatioAllowed = aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.overrideAbbEmiRatio as a real;
          }           
        }         

        print("----> aBlazeApplicant.maxAbbEmiRatioAllowed :: " aBlazeApplicant.maxAbbEmiRatioAllowed);

        aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.maxAbbEmiRatioAllowed = aBlazeApplicant.maxAbbEmiRatioAllowed;
        print("----> aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.maxAbbEmiRatioAllowed :: " aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.maxAbbEmiRatioAllowed);

        print("----> aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.avgMonthlyBalancePerfios :: " aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.avgMonthlyBalancePerfios);

        if(aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.avgMonthlyBalancePerfios <> unknown) then {
            totalPerfios = totalPerfios + aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.avgMonthlyBalancePerfios;
          }
          print("----> totalPerfios in loop :: " totalPerfios);

        incomeAvailableForLoan is a real initially 0;
        if(aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.avgMonthlyBalancePerfios <> unknown 
           and aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.maxAbbEmiRatioAllowed <> unknown 
           and aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.maxAbbEmiRatioAllowed <> 0) then {
          incomeAvailableForLoan = (aBlazeApplicant.applicantAdditionalDetails.otherSenpInputEligibility.avgMonthlyBalancePerfios
                                  /aBlazeApplicant.maxAbbEmiRatioAllowed)- totalInstallmentAmount;
        }    
        print("----> incomeAvailableForLoan :: " incomeAvailableForLoan);

        // baseRate, tenor
        baseRate is a real initially 0;
        tenor is a real initially 0;
        if(aBlazeApplication.loanBasicDetail.paymentDetails.baseRate as a real <> unknown 
           and aBlazeApplication.loanBasicDetail.paymentDetails.numberOfInstallments as a real <> unknown) then {
          baseRate = aBlazeApplication.loanBasicDetail.paymentDetails.baseRate as a real;
          tenor = aBlazeApplication.loanBasicDetail.paymentDetails.numberOfInstallments as a real;
        }

        print("----> baseRate :: " baseRate);
        print("----> tenor :: " tenor);

        multiplier is a real initially 0;
        divisor is a real initially 0;
        rate is a real initially 0;
        ratePerMonth is a real initially 0;

        ratePerMonth = baseRate/(12*100);
        rate = 1 + ratePerMonth;
        multiplier = math().power(rate, tenor);
        divisor = multiplier - 1;

        print("----> multiplier :: " multiplier);
        print("----> divisor :: " divisor);
        print("----> ratePerMonth :: " ratePerMonth);

        emiPerLakh is a real initially 0;
        if(divisor <> 0) then {
          emiPerLakh = (100000 * ratePerMonth * multiplier) / divisor;
        }
        print("----> emiPerLakh :: " emiPerLakh);

        eligibleLoanAmountAbb is a real initially 0;
        if(emiPerLakh <> 0) then {
          eligibleLoanAmountAbb = (incomeAvailableForLoan/emiPerLakh) * 100000;
        }    

        print("----> aBlazeApplicant.natureOfBusiness :: " aBlazeApplicant.natureOfBusiness);
        
               if((aBlazeApplicant.applicantAdditionalDetails.buffer1 =(ignoring case)"NO"
         or aBlazeApplicant.applicantAdditionalDetails.buffer1 =""
          or aBlazeApplicant.applicantAdditionalDetails.buffer1 =unknown
          or aBlazeApplicant.applicantAdditionalDetails.buffer1 =unavailable)
         and (aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName1 ="NO"
            or aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName1 =""
            or aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName1 =unknown
            or aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName1 =unavailable))then{
        // Manufacturing
        if(aBlazeApplicant.natureOfBusiness =(ignoring case)"MANUFACTURING") then {
          if(aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover <> unknown
             and (eligibleLoanAmountAbb > aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover)) then {
            eligibleLoanAmountAbb = aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover;
            print("----> eligibleLoanAmountAbb Manufacturing  :: " eligibleLoanAmountAbb);
          }
        }    
        // Trading
        if(aBlazeApplicant.natureOfBusiness =(ignoring case)"TRADING") then {
          if(aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover <> unknown
             and (eligibleLoanAmountAbb > aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover)) then {
            eligibleLoanAmountAbb = 0.75 * aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover;
            print("----> eligibleLoanAmountAbb Trading  :: " eligibleLoanAmountAbb);
          }
        }
       }
        print("----> aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover :: " aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover);
        print("----> eligibleLoanAmountAbb :: " eligibleLoanAmountAbb);
        print("----> aBlazeApplication.eligibleLoanAmountAbb in loop before :: " aBlazeApplication.eligibleLoanAmountAbb);
        if(aBlazeApplication.eligibleLoanAmountAbb is equal to unknown) then {
          aBlazeApplication.eligibleLoanAmountAbb = 0;
          print("----> aBlazeApplication.eligibleLoanAmountAbb initialised to zero:: " aBlazeApplication.eligibleLoanAmountAbb);
        }
        aBlazeApplication.eligibleLoanAmountAbb = aBlazeApplication.eligibleLoanAmountAbb + eligibleLoanAmountAbb;
        print("----> aBlazeApplication.eligibleLoanAmountAbb in loop after :: " aBlazeApplication.eligibleLoanAmountAbb);
      }
    }
    print("----> aBlazeApplication.eligibleLoanAmountAbb :: " aBlazeApplication.eligibleLoanAmountAbb);
   
    print("----> totalPerfios final :: " totalPerfios);
    if(aBlazeApplication.finalMonthlyIncomeAllApplicant <> unknown) then {
        aBlazeApplication.finalMonthlyIncomeAllApplicant = aBlazeApplication.finalMonthlyIncomeAllApplicant + totalPerfios;
    }
    print("----> aBlazeApplication.finalMonthlyIncomeAllApplicant :: " aBlazeApplication.finalMonthlyIncomeAllApplicant);
    
    if(aBlazeApplication.applicationAdditionalDetails.finalOffer.MAXLOELIGINC<>unknown and aBlazeApplication.eligibleLoanAmountAbb<> unknown) then {
      aBlazeApplication.applicationAdditionalDetails.finalOffer.MAXLOELIGINC = aBlazeApplication.applicationAdditionalDetails.finalOffer.MAXLOELIGINC 
        + aBlazeApplication.eligibleLoanAmountAbb;      
    }
    print("----> aBlazeApplication.applicationAdditionalDetails.finalOffer.MAXLOELIGINC :: " aBlazeApplication.applicationAdditionalDetails.finalOffer.MAXLOELIGINC);
    
  }
  
  print("++++> Exiting function :: fn_HL_Eligibility_Basis_ABB");
  print("");

}catch an Exception with {
  aBlazeApplication.fn_HL_EligibilityBasisABBException = true;  
  print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}
]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='2D0BnF'>
    <instance ref='ParameterNameVH'>
     <value>message</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>Message</value>
    </instance>
   </item>
  </instance-list>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_Eligibility_Basis_ABB1</value>
 </instance>
</instantiation>