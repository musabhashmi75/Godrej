<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_BL_ExperianScorecards'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_BL_ExperianScorecards1</value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_BL_ExperianScorecards</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("");
print("++++> Entering function :: fn_BL_ExperianScorecards");

aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;

applicationDate  is  a  date;
applicationDate  =  message.invocation.applicationDate;

errType is a string initially "";
errId is a string initially "";
errName is a string initially "";
errAction is a string initially "";
errCode is a string initially "";
errText is a string initially "";

try{
if(aBlazeApplication.businessErrorsFlag = false) then {

  print("----> Application Date :: "applicationDate);

  // message.response.scoreCardDetails
  scoreCardDetailArray is some array of ScoreCardDetail initially an array of ScoreCardDetail; 

  print("----> aBlazeApplication.experianScoreCardCheck :: " aBlazeApplication.experianScoreCardCheck);

  if(aBlazeApplication.experianScoreCardCheck<>unknown and aBlazeApplication.experianScoreCardCheck is equal to true) then {

    // Experian Score of all the applicants
    for  each  BlazeApplicant  in  BTCommonVar.termInput.blazeApplication.blazeApplicantArray  such  that  
    (it  <>  unknown  and  it.creditBureauData  <>  unknown)  
    do  {
  	experianSegment is a string;
      aBlazeApplicant  is  some  BlazeApplicant  initially  it  as  a  BlazeApplicant;
      print("Applicant Type in Experian Score Card---> "aBlazeApplicant.applicantType);
      // if(aBlazeApplicant.employmentType<>(ignoring case) "NON-WORKING") then{
      result is a boolean initially false;  
	  print("----> aBlazeApplicant.isNtc ::"aBlazeApplicant.isNtc);
      if(aBlazeApplicant.isNtc=false and aBlazeApplicant.creditBureauData.blazeAccountDetailsArray<>unknown 
         and aBlazeApplicant.creditBureauData.blazeAccountDetailsArray.count>0) then {
			 print("----> Entered First Block");
        for  each  BlazeAccountDetails  in  aBlazeApplicant.creditBureauData.blazeAccountDetailsArray 
        do { 
			print("---->Entered Account Iteration");
          Account  is  some  BlazeAccountDetails  initially  it  as  a  BlazeAccountDetails;    
          //  Accounts older than a year    
          if(Account.accountOpenDate<>unknown and applicationDate.subtractInMonths(Account.accountOpenDate).months  >=  12)  then {
            result = true;
          } else if(Account.lastPaymentDate<>unknown and applicationDate.subtractInMonths(Account.lastPaymentDate).months  >=  12) then {
            result = true;
          } else if(Account.paymentHistoryStartDate<>unknown and applicationDate.subtractInMonths(Account.paymentHistoryStartDate).months  >=  12) then {
            result = true;
          }    
        }
      } else {
        print("**Error :: ###>> No Accounts present in Cibil report <<###");
        errType = "HardStop";
        errText = "No Accounts present in Cibil report";
        errId = "ERRCB002";
        errName = errId;
        fn_SetErrorInResponse(message,errType,errId,errName,errAction,errCode,errText);
      }   
     
      print("----> result :: "result);
      
      // Experian Score
      experian_Score is a real initially 0;
		print("xXX");
		print("---->NdScoreModelReturnInfo"NdScoreModelReturnInfo);
      scoreModelDecision is some NdScoreModelReturnInfo;
	  
	  print("----> result ::"result);
	  print("----> aBlazeApplicant.employmentType ::"aBlazeApplicant.employmentType);
	  print("----> experian_Score ::"experian_Score);
      if(result is true) then {
        if(aBlazeApplicant.isNtc=false  and  aBlazeApplicant.employmentType=  (ignoring  case  )  "SALARIED")  then  {
          scoreModelDecision = Sal_Segment_Experian_Score_Card_Instance(aBlazeApplicant);
          experian_Score = scoreModelDecision.score;           
        } else  if(aBlazeApplicant.isNtc=false  and  (aBlazeApplicant.employmentType=  (ignoring  case  )  "SEP"  
        or  aBlazeApplicant.employmentType=  (ignoring  case  )"SENP"))  then  {
          scoreModelDecision = Self_employed_Segment_Experian_Score_Card_Instance(aBlazeApplicant);
          experian_Score = scoreModelDecision.score;
        }       
      } 
	  print("----> experian_Score ::"experian_Score);
      if(aBlazeApplicant.isNtc=true)  then  {  
        scoreModelDecision = Thin_Segment_Experian_Score_Card_Instance(aBlazeApplicant);
        experian_Score = scoreModelDecision.score;      
      }      
      print("----> experian_Score :: "experian_Score); 
      aBlazeApplicant.experianScore = experian_Score;  
      experianSegment =SENP_Experience_Segmentation(aBlazeApplicant);
      
      // message.response.scoreCardDetails.scoreCardCharacteristics
      scoreCardCharacteristicsArray is some array of ScoreCardCharacteristicsDetail initially an array of ScoreCardCharacteristicsDetail;
      if(scoreModelDecision<> unknown and scoreModelDecision<> null) then {
        for each NdScoredCharacteristic in scoreModelDecision.scoredCharacteristics such that (it  <>  unknown)
        do {
          scoredCharacteristics  is  some  NdScoredCharacteristic  initially  it  as  a  NdScoredCharacteristic;
          scoreCardCharacteristicsDetail is some ScoreCardCharacteristicsDetail initially a ScoreCardCharacteristicsDetail;
          
          //scoreCardCharacteristicsDetail.baselineScore = scoredCharacteristics.baselineScore as a string;
          //scoreCardCharacteristicsDetail.binLabel = scoredCharacteristics.binLabel;
          scoreCardCharacteristicsDetail.characteristicName = scoredCharacteristics.characteristicName;    
          scoreCardCharacteristicsDetail.characteristicValue =  scoredCharacteristics.binLabel;
          scoreCardCharacteristicsDetail.reasonCode = scoredCharacteristics.reasonCode as a string;
          scoreCardCharacteristicsDetail.partialScore = scoredCharacteristics.partialScore as a string;
          scoreCardCharacteristicsArray.append(scoreCardCharacteristicsDetail);
        }
        print("----> scoreCardCharacteristicsArray count :: " scoreCardCharacteristicsArray.count);
        
        // scoreCardDetail
        scoreCardDetail is some ScoreCardDetail initially a ScoreCardDetail;  
        if(scoreCardCharacteristicsArray <> unknown and scoreCardCharacteristicsArray <> null) then {
          scoreCardDetail.scoreCardCharacteristics = scoreCardCharacteristicsArray;
        }
        scoreCardDetail.scorecardName = portable().concat(scoreModelDecision.scoreModelName,portable().concat("_",experianSegment));
        scoreCardDetail.scorecardScore = scoreModelDecision.score;
        scoreCardDetail.characteristicCount = scoreModelDecision.characteristicCount;
        scoreCardDetail.scorecardKey = "experian_Score";
        scoreCardDetail.purpose = "AutoPopulate";
        scoreCardDetail.entityType = aBlazeApplicant.applicantType;
        scoreCardDetail.entityId = aBlazeApplicant.customerCif as a string;
        scoreCardDetailArray.append(scoreCardDetail);   
      }  
  //  }
    }

    print("----> scoreCardDetailArray count :: " scoreCardDetailArray.count);
    if(scoreCardDetailArray <> unknown and scoreCardDetailArray <> null) then {
      message.response.scoreCardDetails = scoreCardDetailArray;
    }
  } 
}

  print("++++> Exiting function :: fn_BL_ExperianScorecards");
  print("");

}catch an Exception with {
  aBlazeApplication.fn_ExperianScoreCardsException = true;  
  print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='8to3hE'>
    <instance ref='ParameterNameVH'>
     <value>message</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>Message</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>