<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_HL_EligibleLoanAmountProgram'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_HL_EligibleLoanAmountProgram</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("");
print("++++> Entering function :: fn_HL_EligibleLoanAmountProgram");

aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;

try{
  // totalInstallmentAmount
  totalInstallmentAmount is a real initially 0; 
  for each BankingDetails in aBlazeApplicant.bankingDetails
  do {
    for each ExternalLiabilities in it.externalLiabilities
    do{
      totalInstallmentAmount = totalInstallmentAmount + it.installmentAmount.amount;
    }     
  } 
  print("----> totalInstallmentAmount :: " totalInstallmentAmount);

  print("----> incomeProgramUsed :: " incomeProgramUsed);
  print("----> netMonthlyIncomeEligibility :: " netMonthlyIncomeEligibility);

  //totalIncomeEligibleSenp
  totalIncomeEligibleSenp is a real initially 0;
  print("----> aBlazeApplicant.foir :: " aBlazeApplicant.foir);
  if(netMonthlyIncomeEligibility <> unknown and aBlazeApplicant.foir <> unknown) then{  
    totalIncomeEligibleSenp = netMonthlyIncomeEligibility * (aBlazeApplicant.foir/100);  
  }
  print("----> totalIncomeEligibleSenp for foir :: " totalIncomeEligibleSenp);


  incomeAvailableForLoan is a real initially 0;
  if(totalIncomeEligibleSenp <> unknown and totalInstallmentAmount <> unknown) then{
    incomeAvailableForLoan = totalIncomeEligibleSenp - totalInstallmentAmount;
  }
  print("----> incomeAvailableForLoan :: " incomeAvailableForLoan);


  // baseRate, tenor
  baseRate is a real initially 0;
  tenor is a real initially 0;
  if(aBlazeApplication.loanBasicDetail.paymentDetails.baseRate as a real <> unknown 
     and aBlazeApplication.loanBasicDetail.paymentDetails.numberOfInstallments as a real <> unknown) then {
    baseRate = aBlazeApplication.loanBasicDetail.paymentDetails.baseRate as a real;
    tenor = aBlazeApplication.loanBasicDetail.paymentDetails.numberOfInstallments as a real;
  }

  print("----> baseRate :: " baseRate);
  print("----> tenor :: " tenor);

  multiplier is a real initially 0;
  divisor is a real initially 0;
  rate is a real initially 0;
  ratePerMonth is a real initially 0;

  ratePerMonth = baseRate/(12*100);

  rate = 1 + ratePerMonth;
  multiplier = math().power(rate, tenor);
  divisor = multiplier - 1;

  print("----> multiplier :: " multiplier);
  print("----> divisor :: " divisor);
  print("----> ratePerMonth :: " ratePerMonth);

  emiPerLakh is a real initially 0;
  if(divisor <> 0) then {
    emiPerLakh = (100000 * ratePerMonth * multiplier) / divisor;
  }
  print("----> emiPerLakh :: " emiPerLakh);

  print("----> aBlazeApplicant.natureOfBusiness :: " aBlazeApplicant.natureOfBusiness);
  print("----> aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover :: " aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover);
  eligibleLoanAmountProgram is a real initially 0;
  if(emiPerLakh<>unknown and incomeAvailableForLoan<>unknown and emiPerLakh <> 0) then {
    eligibleLoanAmountProgram = (incomeAvailableForLoan/emiPerLakh)*100000;
    print("----> eligibleLoanAmountProgram based on incomeAvailableForLoan/emiPerLakh  :: " eligibleLoanAmountProgram);
  } 
         if((aBlazeApplicant.applicantAdditionalDetails.buffer1 =(ignoring case)"NO"
         or aBlazeApplicant.applicantAdditionalDetails.buffer1 =""
         or aBlazeApplicant.applicantAdditionalDetails.buffer1 =unknown
         or aBlazeApplicant.applicantAdditionalDetails.buffer1 =unavailable)
         and (aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName1 ="NO"
         or aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName1 =""
         or aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName1 =unknown
         or aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName1 =unavailable))then{
  if(incomeProgramUsed <> unknown and incomeProgramUsed <> (ignoring case)  "DIRECTOR RENUMERATION") then {
    // Manufacturing
    if (aBlazeApplicant.natureOfBusiness =(ignoring case)"MANUFACTURING") then {
      if(aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover<>unknown 
         and eligibleLoanAmountProgram > aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover) then{
        eligibleLoanAmountProgram = aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover;
        print("----> eligibleLoanAmountProgram Manufacturing  :: " eligibleLoanAmountProgram);
      }
    } 
    // Trading
    if(aBlazeApplicant.natureOfBusiness =(ignoring case)"TRADING") then {
      if(aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover<>unknown 
         and eligibleLoanAmountProgram > aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover) then{
        eligibleLoanAmountProgram = 0.75 * aBlazeApplicant.applicantAdditionalDetails.senpLatestYearEligibility.turnover;
        print("----> eligibleLoanAmountProgram Trading  :: " eligibleLoanAmountProgram);
      }
    }  
  }
 }

  aBlazeApplication.eligibleLoanAmountFoir = aBlazeApplication.eligibleLoanAmountFoir + eligibleLoanAmountProgram;
  print("----> aBlazeApplication.eligibleLoanAmountFoir :: " aBlazeApplication.eligibleLoanAmountFoir);

  print("++++> Exiting function :: fn_HL_EligibleLoanAmountProgram");
  print("");

}catch an Exception with {
  aBlazeApplication.fn_HL_EligibileLoanAmountProgramException = true;  
  print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='DEBptT'>
    <instance ref='ParameterNameVH'>
     <value>aBlazeApplicant</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeApplicant</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='AmyKeI'>
    <instance ref='ParameterNameVH'>
     <value>netMonthlyIncomeEligibility</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>real</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='JqKrEs'>
    <instance ref='ParameterNameVH'>
     <value>incomeProgramUsed</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>string</value>
    </instance>
   </item>
  </instance-list>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_EligibleLoanAmountProgram1</value>
 </instance>
</instantiation>