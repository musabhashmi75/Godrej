<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_LAP_Deviations'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_LAP_Deviations1</value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_LAP_Deviations</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("");
print("++++> Entering function :: fn_LAP_Deviations");

aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;

try{
if(aBlazeApplication.businessErrorsFlag = false) then {

  print("----> aBlazeApplication.deviationsCheck :: " aBlazeApplication.deviationsCheck);

  if(aBlazeApplication.deviationsCheck is equal to true) then {

    print("----> LAP_ApplicationDeviations called :: ");
    LAP_ApplicationDeviations(message);
      
    for  each  BlazeApplicant  in  BTCommonVar.termInput.blazeApplication.blazeApplicantArray
    do {
      aBlazeApplicant  is  some  BlazeApplicant  initially  it  as  a  BlazeApplicant;
       
      print("---->  aBlazeApplicant.customerCategory :: "  aBlazeApplicant.customerCategory);
      
       print("----> LAP_ApplicationDeviations called :: ");
 	   LAP_ApplicantDeviations(message,aBlazeApplicant);
     
        
      if(aBlazeApplicant.customerCategory<>unknown and aBlazeApplicant.customerCategory<>(ignoring case) "CORP") then {
            print("----> LAP_salaried  called :: ");
          
        LAP_KarzaDeviations(message, aBlazeApplicant, aBlazeApplicant.karza);
        print("----> LAP_KarzaDeviations called :: ");
          
        LAP_CommonDeviations(message, aBlazeApplicant);
        print("----> LAP_CommonDeviations called :: ");
          
        LAP_BureauDeviations(message, aBlazeApplicant);
        print("----> LAP_BureauDeviations called :: ");
        
          
        if (aBlazeApplicant.employmentType=  (ignoring  case  )  "SALARIED") then {
          LAP_SalariedDeviations(message, aBlazeApplicant);
          print("----> LAP_SalariedDeviations called :: ");
        }
          
        if (aBlazeApplicant.employmentType=  (ignoring  case  )  "SENP") then {
          LAP_SenpDeviations(message, aBlazeApplicant);
          print("----> LAP_SenpDeviations called :: ");
        }
          
        if (aBlazeApplicant.employmentType=  (ignoring  case  )  "SEP") then {
          LAP_SepDeviations(message, aBlazeApplicant);
          print("----> LAP_SepDeviations called :: ");
        }       
      
      } else if(aBlazeApplicant.customerCategory<>unknown and aBlazeApplicant.customerCategory=(ignoring case) "CORP") then {
            print("----> LAP_corp  called :: ");
        LAP_CorporateDeviations(message, aBlazeApplicant);
        print("----> LAP_CorporateDeviations called :: ");      
      }      

    }
  }
}
  print("++++> Exiting function :: fn_LAP_Deviations");
  print("");

}catch an Exception with {
  aBlazeApplication.fn_LAP_DeviationsException = true;  
  print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='KjErBq'>
    <instance ref='ParameterNameVH'>
     <value>message</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>Message</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>