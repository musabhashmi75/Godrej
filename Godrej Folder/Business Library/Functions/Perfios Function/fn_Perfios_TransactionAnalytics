<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_Perfios_TransactionAnalytics'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_Perfios_TransactionAnalytics1</value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_Perfios_TransactionAnalytics</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("");
print("++++> Entering function :: fn_Perfios_TransactionAnalytics");
aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;

try{
productCode is a string initially "";
productCode = message.invocation.decisionService;
applicantId is a string;
applicantType is a string;
//aBlazeApplicant is some BlazeApplicant initially a BlazeApplicant;
applicantId = aBlazeApplicant.customerCif as a string;
applicantType = aBlazeApplicant.applicantType;

 // Self & Related Party Transactions    
 selfRelatedPartyCreditAmount is a real initially 0;
 selfRelatedPartyCreditAmountPer is a real initially 0;
 selfRelatedPartyCreditCount is an real initially 0;
 selfRelatedPartyCreditCountPer is a real initially 0;
 
 selfRelatedPartyDebitAmount is a real initially 0;
 selfRelatedPartyDebitAmountPer is a real initially 0;
 selfRelatedPartyDebitCount is a real initially 0;
 selfRelatedPartyDebitCountPer is a real initially 0;

// Value Transactions
 highValueXnsCreditAmount is a real initially 0;
 highValueXnsCreditAmountPer is a real initially 0;
 highValueXnsCreditCount is an integer initially 0;
 highValueXnsCreditCountPer is a real initially 0;

 highValueXnsDebitAmount is a real initially 0;
 highValueXnsDebitAmountPer is a real initially 0;
 highValueXnsDebitCount is an integer initially 0;
 highValueXnsDebitCountPer is a real initially 0;
 
// Non-Trade Transactions for Credit
 nonTradeXnsAmountTotalBusinessCreditXns is a real initially 0;
 nonTradeXnsCreditAmount is a real initially 0;
 nonTradeXnsCreditAmountPer is a real initially 0;
 nonTradeXnsCountNumberOfBusinessCreditXns is a real initially 0;
 nonTradeXnsCreditCount is a real initially 0;
 nonTradeXnsCreditCountPer is a real initially 0;

// Non-Trade Transactions for Debit
 nonTradeXnsAmountTotalBusinessDebitXns is a real initially 0;
 nonTradeXnsDebitAmount is a real initially 0;
 nonTradeXnsDebitAmountPer is a real initially 0;
 nonTradeXnsCountNumberOfBusinessDebitXns is a real initially 0;
 nonTradeXnsDebitCount is a real initially 0;
 nonTradeXnsDebitCountPer is a real initially 0;

// Circular Transactions Amount
 circularXnsAmount is a real initially 0;
 circularXnsAmountPer is a real initially 0;
	
//  Circular Transactions Count
 circularXnsCount is a real initially 0;
 circularXnsCountPer is a real initially 0;

totalCreditAmount is a real initially 0;
totalCreditCount is a real initially 0;
totalDebitAmount is a real initially 0;
totalDebitCount is a real initially 0;

monthDataCount is an integer initially 0;
monthlyDetalisCount is an integer initially 0;
monthlyDataArrayCount is an integer initially 0;
monthlyDetailsArrayCount is an integer initially 0;

if(perfiosData.data.additionalMonthlyDetails is known and perfiosData.data.additionalMonthlyDetails.monthlyData1 is not null) then{
	monthlyDataArrayCount = perfiosData.data.additionalMonthlyDetails.monthlyData1.count - 12;
	// Entering MonthlyData1 Loop
	for each MonthlyData1 in perfiosData.data.additionalMonthlyDetails.monthlyData1 such that(it <> unknown) do {
		monthlyData is some MonthlyData1 initially it as a MonthlyData1;
		
		if( monthDataCount >= monthlyDataArrayCount) then {         ////.................. latest 12 month
			
			// Calculate selfRelatedPartyCreditAmount
			if(monthlyData.totalOfSelfAndRelatedPartyCreditTxns is known) then{
				selfRelatedPartyCreditAmount = selfRelatedPartyCreditAmount + monthlyData.totalOfSelfAndRelatedPartyCreditTxns;
			}
			
			// Calculate selfRelatedPartyCreditCount
			if(monthlyData.numberOfSelfAndRelatedPartyCreditTxns is known) then{
				selfRelatedPartyCreditCount = selfRelatedPartyCreditCount + monthlyData.numberOfSelfAndRelatedPartyCreditTxns;
			}
			
			// Calculate selfRelatedPartyDebitAmount
			if(monthlyData.totalOfSelfAndRelatedPartyDebitTxns is known) then{
				selfRelatedPartyDebitAmount = selfRelatedPartyDebitAmount + monthlyData.totalOfSelfAndRelatedPartyDebitTxns;
			}
			
			// Calculate selfRelatedPartyDebitCount
			if(monthlyData.numberOfSelfAndRelatedPartyDebitTxns is known) then{
				selfRelatedPartyDebitCount = selfRelatedPartyDebitCount + monthlyData.numberOfSelfAndRelatedPartyDebitTxns;
			}
			
			// Calculate nonTradeXnsAmountTotalBusinessCreditXns
			if(monthlyData.totalBusinessCreditTxns is known) then{
				nonTradeXnsAmountTotalBusinessCreditXns = nonTradeXnsAmountTotalBusinessCreditXns + monthlyData.totalBusinessCreditTxns;
			}
			
			// Calculate nonTradeXnsCountNumberOfBusinessCreditXns
			if(monthlyData.numberOfBusinessCreditTxns is known) then{
				nonTradeXnsCountNumberOfBusinessCreditXns = nonTradeXnsCountNumberOfBusinessCreditXns + monthlyData.numberOfBusinessCreditTxns;
			}
			
			// Calculate nonTradeXnsAmountTotalBusinessDebitXns
			if(monthlyData.totalBusinessDebitTxns is known) then{
				nonTradeXnsAmountTotalBusinessDebitXns = nonTradeXnsAmountTotalBusinessDebitXns + monthlyData.totalBusinessDebitTxns;
			}
			
			// Calculate nonTradeXnsCountNumberOfBusinessDebitXns
			if(monthlyData.numberOfBusinessDebitTxns is known) then{
				nonTradeXnsCountNumberOfBusinessDebitXns = nonTradeXnsCountNumberOfBusinessDebitXns + monthlyData.numberOfBusinessDebitTxns;
			}
		}
		monthDataCount = monthDataCount + 1;
		// Exiting MonthlyData1 Loop
	}
}
if(perfiosData.data.accountAnalysis is not null and perfiosData.data.accountAnalysis[0].monthlyDetails is not null) then{
	monthlyDetailsArrayCount = perfiosData.data.accountAnalysis[0].monthlyDetails.count - 12;
	
	// Entering MonthlyDetail Loop
	for each MonthlyDetail in perfiosData.data.accountAnalysis[0].monthlyDetails such that(it <> unknown)
		do {
		monthly_Details is some MonthlyDetail initially it as a MonthlyDetail;
		
		if(monthlyDetalisCount >= monthlyDetailsArrayCount) then{         ////.................. latest 12 month
			if(monthly_Details.totalCredit is known) then{
				totalCreditAmount = totalCreditAmount + monthly_Details.totalCredit;
			}
			if(monthly_Details.credits is known) then{
				totalCreditCount = totalCreditCount + monthly_Details.credits;
			}
			if(monthly_Details.totalDebit is known) then{
				totalDebitAmount = totalDebitAmount + monthly_Details.totalDebit;
			}
			
			if(monthly_Details.debits is known) then{
				totalDebitCount = totalDebitCount + monthly_Details.debits;
			}
			
			// Calculate circularXnsAmount
			if(monthly_Details.totalSamePartyAmountCreditDebit is known) then{
				circularXnsAmount = circularXnsAmount + monthly_Details.totalSamePartyAmountCreditDebit;
			}
			
			// Calculate circularXnsCount
			if(monthly_Details.samePartyAmountCreditDebits is known) then{
				circularXnsCount = circularXnsCount + monthly_Details.samePartyAmountCreditDebits;
			}
		}
		
		monthlyDetalisCount = monthlyDetalisCount + 1;
		// Exiting MonthlyDetail Loop
	}
	
}
	
	// Entering CombinedHighValueCreditXn Loop
	for each CombinedHighValueCreditXn in perfiosData.data.combinedHighValueCreditXns such that(it <> unknown)
    do {
		combinedHighValueCreditX is some CombinedHighValueCreditXn initially it as a CombinedHighValueCreditXn;
			
			// Calculate highValueXnsCreditAmount
			if(combinedHighValueCreditX.amount is known) then{
				highValueXnsCreditAmount = highValueXnsCreditAmount + combinedHighValueCreditX.amount;
			}
			
		// Calculate highValueXnsCreditCount
		highValueXnsCreditCount = highValueXnsCreditCount + 1;
		// Exiting CombinedHighValueCreditXn Loop
    }
	
	// Entering CombinedHighValueDebitXns Loop
	for each CombinedHighValueDebitXns in perfiosData.data.combinedHighValueDebitXns such that(it <> unknown)
    do {
		combinedHighValueDebitX is some CombinedHighValueDebitXns initially it as a CombinedHighValueDebitXns;
		
			// Calculate highValueXnsDebitAmount
			if(combinedHighValueDebitX.amount is known) then{
				highValueXnsDebitAmount = highValueXnsDebitAmount + combinedHighValueDebitX.amount;
			}
	
		// Calculate highValueXnsDebitCount
		highValueXnsDebitCount = highValueXnsDebitCount + 1;
        // Exiting CombinedHighValueDebitXns Loop
	}
	
	// Calculate selfRelatedPartyCreditAmountPer
	if(selfRelatedPartyCreditAmount is known and totalCreditAmount is known) then{
		selfRelatedPartyCreditAmountPer = (selfRelatedPartyCreditAmount/totalCreditAmount)*100;
	}
	
	// Calculate selfRelatedPartyCreditCountPer
	if(selfRelatedPartyCreditCount is known and totalCreditCount is known) then{
		selfRelatedPartyCreditCountPer = (selfRelatedPartyCreditCount/totalCreditCount)*100;
	}
	
	// Calculate selfRelatedPartyDebitAmountPer
	if(selfRelatedPartyDebitAmount is known and totalDebitAmount is known) then{
		selfRelatedPartyDebitAmountPer = (selfRelatedPartyDebitAmount/totalDebitAmount)*100;
	}
	
	// Calculate selfRelatedPartyDebitCountPer
	if(selfRelatedPartyDebitCount is known and totalDebitCount is known) then{
		selfRelatedPartyDebitCountPer = (selfRelatedPartyDebitCount/totalDebitCount)*100;
	}
	
	// Calculate highValueXnsCreditAmountPer
	if(highValueXnsCreditAmount is known and totalCreditAmount is known) then{
		highValueXnsCreditAmountPer = (highValueXnsCreditAmount/totalCreditAmount)*100;
	}
	
	// Calculate applicant.highValueXnsCreditCountPer
	if(highValueXnsCreditCount is known and totalCreditCount is known) then{
		highValueXnsCreditCountPer = (highValueXnsCreditCount/totalCreditCount)*100;
	}
	
	// Calculate highValueXnsDebitAmountPer
	if(highValueXnsDebitAmount is known and totalDebitAmount is known) then{
		highValueXnsDebitAmountPer = (highValueXnsDebitAmount/totalDebitAmount)*100;
	}
	
	// Calculate highValueXnsDebitCountPer
	if(highValueXnsDebitCount is known and totalDebitCount is known) then{
		highValueXnsDebitCountPer = (highValueXnsDebitCount/totalDebitCount)*100;
	}
	
	// Calculate nonTradeXnsCreditAmount
	if(nonTradeXnsAmountTotalBusinessCreditXns is known and totalCreditAmount is known) then{
		nonTradeXnsCreditAmount = nonTradeXnsAmountTotalBusinessCreditXns - totalCreditAmount;
	}

	// Calculate nonTradeXnsCreditAmountPer
	if(nonTradeXnsCreditAmount is known and totalCreditAmount is known) then{
		nonTradeXnsCreditAmountPer = (nonTradeXnsCreditAmount/totalCreditAmount)*100;
	}
	
	// Calculate nonTradeXnsCreditCount
	if(nonTradeXnsCountNumberOfBusinessCreditXns is known and totalCreditCount is known) then{
		nonTradeXnsCreditCount = nonTradeXnsCountNumberOfBusinessCreditXns - totalCreditCount;
	}
	
	// Calculate nonTradeXnsCreditCountPer
	if(nonTradeXnsCreditCount is known and totalCreditCount is known) then{
		nonTradeXnsCreditCountPer = (nonTradeXnsCreditCount/totalCreditCount)*100;
	}
	
	// Calculate nonTradeXnsDebitAmount
	if(nonTradeXnsAmountTotalBusinessDebitXns is known and totalDebitAmount is known) then{
		nonTradeXnsDebitAmount = nonTradeXnsAmountTotalBusinessDebitXns - totalDebitAmount;
	}
	
	// Calculate nonTradeXnsDebitAmountPer
	if(nonTradeXnsDebitAmount is known and totalDebitAmount is known) then{
		nonTradeXnsDebitAmountPer = (nonTradeXnsDebitAmount/totalDebitAmount)*100;
	}
	
	// Calculate nonTradeXnsDebitCount
	if(nonTradeXnsCountNumberOfBusinessDebitXns is known and totalDebitCount is known) then{
		nonTradeXnsDebitCount = nonTradeXnsCountNumberOfBusinessDebitXns - totalDebitCount;
	}
	
	// Calculate nonTradeXnsDebitCountPer
	if(nonTradeXnsDebitCount is known and totalDebitCount is known) then{
		nonTradeXnsDebitCountPer = (nonTradeXnsDebitCount/totalDebitCount)*100;
	}
	
	// Calculate circularXnsAmountPer
	if(circularXnsAmount is known) then{
		circularXnsAmountPer = (circularXnsAmount / (totalCreditAmount + totalDebitAmount))*100;
	}
	
	// Calculate circularXnsCountPer
	if(circularXnsCount is known) then{
		circularXnsCountPer = (circularXnsCount / (totalDebitCount + totalCreditCount))*100;
	}
	
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditAmount,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditAmountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditCount,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyCreditCountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitAmount,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitAmountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitCount,-2) as a string);
	fn_AppendCalculatedVariable(message,"selfRelatedPartyDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(selfRelatedPartyDebitCountPer,-2) as a string);
	
	fn_AppendCalculatedVariable(message,"highValueXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsCreditAmount,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsCreditAmountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", highValueXnsCreditCount as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsCreditCountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsDebitAmount,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsDebitAmountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", highValueXnsDebitCount as a string);
	fn_AppendCalculatedVariable(message,"highValueXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(highValueXnsDebitCountPer,-2) as a string);
	
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditAmount,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditAmountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditCount,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsCreditCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsCreditCountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitAmount,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitAmountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitCount,-2) as a string);
	fn_AppendCalculatedVariable(message,"nonTradeXnsDebitCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(nonTradeXnsDebitCountPer,-2) as a string);
	
	fn_AppendCalculatedVariable(message,"circularXnsAmount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsAmount,-2) as a string);
	fn_AppendCalculatedVariable(message,"circularXnsAmountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsAmountPer,-2) as a string);
	fn_AppendCalculatedVariable(message,"circularXnsCount", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCount,-2) as a string);
	fn_AppendCalculatedVariable(message,"circularXnsCountPer", "real", productCode, applicantId, applicantType, "TransactionAnalytics", math().round(circularXnsCountPer,-2) as a string);
	
  print("selfRelatedPartyCreditAmount--------------------------------->"selfRelatedPartyCreditAmount);
  print("selfRelatedPartyCreditAmountPer--------------------------------->"selfRelatedPartyCreditAmountPer);
  print("selfRelatedPartyCreditCount--------------------------------->"selfRelatedPartyCreditCount);
  print("selfRelatedPartyCreditCountPer--------------------------------->"selfRelatedPartyCreditCountPer);
  print("selfRelatedPartyDebitAmount--------------------------------->"selfRelatedPartyDebitAmount);
  print("selfRelatedPartyDebitAmountPer--------------------------------->"selfRelatedPartyDebitAmountPer);
  print("selfRelatedPartyDebitCount--------------------------------->"selfRelatedPartyDebitCount);
  print("selfRelatedPartyDebitCountPer--------------------------------->"selfRelatedPartyDebitCountPer);
  print("highValueXnsCreditAmount--------------------------------->"highValueXnsCreditAmount);
  print("highValueXnsCreditAmountPer--------------------------------->"highValueXnsCreditAmountPer);
  print("highValueXnsCreditCount--------------------------------->"highValueXnsCreditCount);
  print("highValueXnsCreditCountPer--------------------------------->"highValueXnsCreditCountPer);
  print("highValueXnsDebitAmountPer--------------------------------->"highValueXnsDebitAmountPer);
  print("highValueXnsDebitCount--------------------------------->"highValueXnsDebitCount);
  print("highValueXnsCreditAmount--------------------------------->"highValueXnsCreditAmount);
  print("highValueXnsDebitCountPer--------------------------------->"highValueXnsDebitCountPer);
  print("nonTradeXnsCreditAmount--------------------------------->"nonTradeXnsCreditAmount);
  print("nonTradeXnsCreditAmountPer--------------------------------->"nonTradeXnsCreditAmountPer);
  print("nonTradeXnsCreditCount--------------------------------->"nonTradeXnsCreditCount);
  print("nonTradeXnsCreditCountPer--------------------------------->"nonTradeXnsCreditCountPer);
  print("nonTradeXnsDebitAmount--------------------------------->"nonTradeXnsDebitAmount);
  print("nonTradeXnsDebitAmountPer--------------------------------->"nonTradeXnsDebitAmountPer);
  print("nonTradeXnsDebitCountPer--------------------------------->"nonTradeXnsDebitCountPer);
  print("nonTradeXnsDebitCount--------------------------------->"nonTradeXnsDebitCount);
  print("circularXnsAmount--------------------------------->"circularXnsAmount);
  print("circularXnsAmountPer--------------------------------->"circularXnsAmountPer);
  print("circularXnsCount--------------------------------->"circularXnsCount);
  print("circularXnsCountPer--------------------------------->"circularXnsCountPer);
	
}catch an Exception with{
	aBlazeApplication.fn_Perfios_TransactionAnalytics = true;  
	print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}

print("++++> Exiting function :: fn_Perfios_TransactionAnalytics");
print("");
]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='6M7Vqz'>
    <instance ref='ParameterNameVH'>
     <value>message</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>Message</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='IDpuLd'>
    <instance ref='ParameterNameVH'>
     <value>perfiosData</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>PerfiosData</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='Kbwshk'>
    <instance ref='ParameterNameVH'>
     <value>aBlazeApplicant</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>BlazeApplicant</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>