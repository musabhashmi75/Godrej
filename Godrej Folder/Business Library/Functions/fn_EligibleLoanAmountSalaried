<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_LAP_EligibleLoanAmountSalaried'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_LAP_EligibleLoanAmountSalaried</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("");
print("++++> Entering function :: fn_LAP_EligibleLoanAmountSalaried");

aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;

try{
 netAnnualSalaryOfAllApplicants is a real initially 0;
 totalAnnualIncomeOfAllSalApplicants is a real initially 0;
 mainApplicant is some BlazeApplicant initially a BlazeApplicant;
 coApplicant is some BlazeApplicant initially a BlazeApplicant;
if(aBlazeApplication.businessErrorsFlag = false) then {


   for each BlazeApplicant  in  BTCommonVar.termInput.blazeApplication.blazeApplicantArray
   do {
     aBlazeApplicant is some BlazeApplicant initially it as a BlazeApplicant;
      bonusIncentivePerT is a real;
     if(aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.buffer1=(unknown or unavailable)
          or aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.buffer1=""
        or aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.buffer1=null)then{
     bonusIncentivePerT = 0; 
        }else{
          bonusIncentivePerT= aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.buffer1 as a real;
          bonusIncentivePerT =bonusIncentivePerT/100;
        }
     print(" bonusIncentivePerT :: " bonusIncentivePerT);
     if(aBlazeApplicant.employmentType<> unknown and aBlazeApplicant.employmentType = (ignoring case)"SALARIED") then{
       //Main Applicant
       if(aBlazeApplicant.applicantType <> unknown and aBlazeApplicant.applicantType = (ignoring case)"MainApp") then {
         mainApplicant = aBlazeApplicant;
       }
       
       // Net Bonus
       netBonus is a real initially 0;
       print("----> aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.latestYearBonus :: " aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.latestYearBonus);
       print("----> aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.previousYearBonus :: " aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.previousYearBonus);
       if (aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.latestYearBonus <> unknown 
           and aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.previousYearBonus <> unknown
           and (aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.latestYearBonus < aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.previousYearBonus)) then {
         netBonus =  bonusIncentivePerT * aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.latestYearBonus;
       }
       
       if(aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.latestYearBonus <> unknown 
           and aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.previousYearBonus <> unknown
           and aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.latestYearBonus > aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.previousYearBonus) then {
         netBonus =  bonusIncentivePerT * ((aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.latestYearBonus 
                             + aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.previousYearBonus)/2);
       }
       print("----> netBonus :: " netBonus);
       aBlazeApplicant.applicantAdditionalDetails.additionalDetail.netBonus = netBonus;
       
       // Net Incentive
       netIncentive is a real initially 0;
       
       print("----> aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth1 :: " aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth1);
       print("----> aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth2 :: " aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth2);
       print("----> aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth3 :: " aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth3);
       print("----> aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth4 :: " aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth4);
       print("----> aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth5 :: " aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth5);
       print("----> aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth6 :: " aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth6);
       
       if(aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth1  <> unknown 
          and aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth2  <> unknown 
          and aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth3  <> unknown 
          and aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth4  <> unknown 
          and aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth5  <> unknown 
          and aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth6  <> unknown) then {
         netIncentive =  ( bonusIncentivePerT*((aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth1 
                               + aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth2 
                               + aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth3 
                               + aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth4 
                               + aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth5 
                               + aBlazeApplicant.applicantAdditionalDetails.salariedEligibility.incentiveMonth6)/6))*12;
       }     
       print("----> netIncentive :: " netIncentive);
       
       // Total Variable Salary
       totalVariableSalary is a real initially 0;
       totalVariableSalary = netBonus + netIncentive;
       aBlazeApplicant.totalVariableSalary = totalVariableSalary;
       print("----> totalVariableSalary :: " totalVariableSalary);
       
       // Total Salary Related Income
       totalSalaryRelatedIncome is a real initially 0;
       if(aBlazeApplicant.applicantAdditionalDetails.additionalDetail.netAnnual <> unknown) then {
         totalSalaryRelatedIncome = aBlazeApplicant.applicantAdditionalDetails.additionalDetail.netAnnual + totalVariableSalary;
         aBlazeApplicant.totalSalaryRelatedIncome=totalSalaryRelatedIncome;
       }     
       print("----> totalSalaryRelatedIncome :: " totalSalaryRelatedIncome);
       
       print("----> aBlazeApplication.maxSalRelatedIncome :: " aBlazeApplication.maxSalRelatedIncome);
       // coApplicant 
       if(aBlazeApplicant.applicantType<> unknown and aBlazeApplicant.applicantType <> (ignoring case)"MainApp") then {
         if(aBlazeApplication.maxSalRelatedIncome < totalSalaryRelatedIncome and aBlazeApplicant.customerRiskSegment <> unknown and aBlazeApplicant.employmentType<> unknown) then {
           aBlazeApplication.maxSalRelatedIncome = totalSalaryRelatedIncome;
           aBlazeApplication.riskSegment = aBlazeApplicant.customerRiskSegment;
           aBlazeApplication.employmentType = aBlazeApplicant.employmentType;
           coApplicant = aBlazeApplicant;
         }
       }
       
       // Total Salary Related Income of All Salaried Applicants
       netAnnualSalaryOfAllApplicants = netAnnualSalaryOfAllApplicants + totalSalaryRelatedIncome;  
       print("----> netAnnualSalaryOfAllApplicants :: " netAnnualSalaryOfAllApplicants);
       
       // Total Other Income
       totalOtherIncome is a real initially 0;
       print("----> aBlazeApplicant.applicantAdditionalDetails.customerIndividualSalaried.rentalIncome :: " aBlazeApplicant.applicantAdditionalDetails.customerIndividualSalaried.rentalIncome);
       print("----> aBlazeApplicant.applicantAdditionalDetails.customerIndividualSalaried.otherIncome :: " aBlazeApplicant.applicantAdditionalDetails.customerIndividualSalaried.otherIncome);
       if(aBlazeApplicant.applicantAdditionalDetails.customerIndividualSalaried.rentalIncome <> unknown
          and aBlazeApplicant.applicantAdditionalDetails.customerIndividualSalaried.otherIncome <> unknown) then {
         totalOtherIncome = aBlazeApplicant.applicantAdditionalDetails.customerIndividualSalaried.rentalIncome 
         + aBlazeApplicant.applicantAdditionalDetails.customerIndividualSalaried.otherIncome;
       }        
       
        //capping as per Vikas
		if((aBlazeApplicant.applicantAdditionalDetails.buffer5 =unavailable
            or aBlazeApplicant.applicantAdditionalDetails.buffer5 =unknown
            or aBlazeApplicant.applicantAdditionalDetails.buffer5 =""
        	or aBlazeApplicant.applicantAdditionalDetails.buffer5 =(ignoring case)"NO"
   			or aBlazeApplicant.applicantAdditionalDetails.buffer5="#")
        	and (
   			aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName2 =unavailable
   			or aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName2 =unknown
  		    or aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName2 =""
   			or aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName2 ="NO"
  			or aBlazeApplicant.applicantAdditionalDetails.associatedCompanies.associatedCompanyName2 ="#")
			)then{
       if(totalOtherIncome > totalSalaryRelatedIncome)then{
         totalOtherIncome = totalSalaryRelatedIncome;
       }
       }
       print("----> totalOtherIncome :: " totalOtherIncome);
       
       //Total Annual Income
       totalAnnualIncome is a real initially 0;
       totalAnnualIncome = totalSalaryRelatedIncome + totalOtherIncome;
       totalAnnualIncomeOfAllSalApplicants = totalAnnualIncomeOfAllSalApplicants + totalAnnualIncome;     
     //} commented by Ankit
   //}Commented  by Ankit


  print("----> aBlazeApplication.finalMonthlyIncomeAllApplicant before :: " aBlazeApplication.finalMonthlyIncomeAllApplicant);
  print("----> totalAnnualIncomeOfAllSalApplicants :: " totalAnnualIncomeOfAllSalApplicants);
  if(aBlazeApplication.finalMonthlyIncomeAllApplicant <> unknown and totalAnnualIncomeOfAllSalApplicants<> unknown) then {
    //aBlazeApplication.finalMonthlyIncomeAllApplicant = aBlazeApplication.finalMonthlyIncomeAllApplicant + totalAnnualIncomeOfAllSalApplicants/12;
    aBlazeApplication.finalMonthlyIncomeAllApplicant = totalAnnualIncomeOfAllSalApplicants/12;
  } else if(totalAnnualIncomeOfAllSalApplicants<>unknown) then {
    aBlazeApplication.finalMonthlyIncomeAllApplicant = totalAnnualIncomeOfAllSalApplicants/12;
  }
  print("----> aBlazeApplication.finalMonthlyIncomeAllApplicant after :: " aBlazeApplication.finalMonthlyIncomeAllApplicant);

  //Net Monthly Income considered for Eligbility
  netMonthlyIncomeEligibility is a real initially 0;
  if(totalAnnualIncomeOfAllSalApplicants<>unknown) then {
    netMonthlyIncomeEligibility = totalAnnualIncomeOfAllSalApplicants/12;
  }
  print("----> netMonthlyIncomeEligibility :: " netMonthlyIncomeEligibility);

  //Salaried Foir
  foir is an integer initially 0;
  additionalFoir is a real initially 0;
  print("----> mainApplicant.applicantType :: " mainApplicant.applicantType);
  print("----> mainApplicant.employmentType :: " mainApplicant.employmentType);
  if(mainApplicant.applicantType <> unknown and mainApplicant.employmentType <> unknown 
     and mainApplicant.applicantType = (ignoring case) "MainApp" and mainApplicant.employmentType = (ignoring case)"SALARIED" 
  and mainApplicant.customerRiskSegment <> unknown and netAnnualSalaryOfAllApplicants<>unknown) then{
    
    LAP_Sal_FOIR_Offer_Matrix_Instance(mainApplicant.customerRiskSegment, netAnnualSalaryOfAllApplicants, aBlazeApplication); 
    
    foir = aBlazeApplication.foir;
    additionalFoir = mainApplicant.applicantAdditionalDetails.salariedEligibility.additionalFoir;
    aBlazeApplication.riskSegment = mainApplicant.customerRiskSegment;
      
    print("----> mainApplicant.applicantAdditionalDetails.salariedEligibility.additionalFoir :: " mainApplicant.applicantAdditionalDetails.salariedEligibility.additionalFoir);
    print("----> mainApplicant.customerRiskSegment :: " mainApplicant.customerRiskSegment);
    
  } else if(aBlazeApplication.riskSegment <> unknown and netAnnualSalaryOfAllApplicants<>unknown) then {
    
    LAP_Sal_FOIR_Offer_Matrix_Instance(aBlazeApplication.riskSegment,netAnnualSalaryOfAllApplicants, aBlazeApplication);
    
    foir = aBlazeApplication.foir;
    additionalFoir = coApplicant.applicantAdditionalDetails.salariedEligibility.additionalFoir;
    aBlazeApplication.riskSegment = coApplicant.customerRiskSegment;
     
    print("----> coApplicant.applicantAdditionalDetails.salariedEligibility.additionalFoir :: " coApplicant.applicantAdditionalDetails.salariedEligibility.additionalFoir);
    print("----> coApplicant.customerRiskSegment :: " coApplicant.customerRiskSegment);

  }
  print("----> aBlazeApplication.foir :: " aBlazeApplication.foir);
  print("----> aBlazeApplication.riskSegment :: " aBlazeApplication.riskSegment);

  // MAXFOIRSAL
  print("----> foir :: " foir);
  print("----> additionalFoir :: " additionalFoir);
  loopFoir is a real initially 0;
  loopFoir = foir;
  for each BlazeApplicant  in  BTCommonVar.termInput.blazeApplication.blazeApplicantArray
  do {  
    print("----> loopFoir :: " loopFoir);
    if(loopFoir<>unknown) then {
      it.applicantAdditionalDetails.salariedEligibility.MAXFOIRSAL = loopFoir; //Loop and add for all applicants//  
    }  
  }

  // totalInstallmentAmount
  totalInstallmentAmount is a real initially 0; 
  //  BlazeApplicant  in  BTCommonVar.termInput.blazeApplication.blazeApplicantArray
  for each BlazeApplicant  in  BTCommonVar.termInput.blazeApplication.blazeApplicantArray
  do {    
    for each BankingDetails in it.bankingDetails
    do {
      for each ExternalLiabilities in it.externalLiabilities
      do{
      //added by Ankit for EMI consider handling
        if(it.installmentAmount.amount<>unknown and it.emiConsideredForFoir = true) then {
              print("----> Ankit added it.emiConsideredForFoir :: " it.emiConsideredForFoir);
          totalInstallmentAmount = totalInstallmentAmount + it.installmentAmount.amount;
          print("----> it.installmentAmount.amount :: " it.installmentAmount.amount);
          
        }      
      }     
    }
  } 
  print("----> totalInstallmentAmount :: " totalInstallmentAmount);

  if(foir <> unknown and additionalFoir <> unknown) then {
    foir = foir + round(additionalFoir);
  }
  print("----> foir + round(additionalFoir) :: " foir);

  //totalIncomeEligibleSalaried
  totalIncomeEligibleSalaried is a real initially 0;
  if(netMonthlyIncomeEligibility <> unknown and foir <> unknown) then {
    totalIncomeEligibleSalaried = netMonthlyIncomeEligibility * (foir/100);
  }
  aBlazeApplication.totalIncomeEligibleSalaried = totalIncomeEligibleSalaried;
  print("----> aBlazeApplication.totalIncomeEligibleSalaried :: " aBlazeApplication.totalIncomeEligibleSalaried);

  // incomeAvailable for loan
  incomeAvailableForLoan is a real initially 0;
  if(totalIncomeEligibleSalaried <> unknown and totalInstallmentAmount <> unknown) then {
    incomeAvailableForLoan = totalIncomeEligibleSalaried - totalInstallmentAmount;
  }
  print("----> incomeAvailableForLoan :: " incomeAvailableForLoan);

  // baseRate, tenor
  baseRate is a real initially 0;
  tenor is a real initially 0;
  if(aBlazeApplication.loanBasicDetail.paymentDetails.baseRate as a real <> unknown 
     and aBlazeApplication.loanBasicDetail.paymentDetails.numberOfInstallments as a real <> unknown) then {
    baseRate = aBlazeApplication.loanBasicDetail.paymentDetails.baseRate as a real;
    tenor = aBlazeApplication.loanBasicDetail.paymentDetails.numberOfInstallments as a real;
  }
  print("----> baseRate :: " baseRate);
  print("----> tenor :: " tenor);

  multiplier is a real initially 0;
  divisor is a real initially 0;
  rate is a real initially 0;
  ratePerMonth is a real initially 0;

  ratePerMonth = baseRate/(12*100);

  rate = 1 + ratePerMonth;
  if(tenor>=180)then{
  			multiplier = math().power(rate, 180);
       }else if(tenor <180)then{
  			multiplier = math().power(rate, tenor);
       }
  divisor = multiplier - 1;

  print("----> multiplier :: " multiplier);
  print("----> divisor :: " divisor);
  print("----> ratePerMonth :: " ratePerMonth);

  emiPerLakh is a real initially 0;
  if(divisor <> 0) then {
    emiPerLakh = (100000 * ratePerMonth * multiplier) / divisor;
  }
  print("----> emiPerLakh :: " emiPerLakh);

  eligibleLoanAmountFoir is a real initially 0;
  if(emiPerLakh<>unknown and incomeAvailableForLoan<>unknown and emiPerLakh <> 0) then {
    eligibleLoanAmountFoir = (incomeAvailableForLoan/emiPerLakh) * 100000;
  }
  print("----> eligibleLoanAmountFoir :: " eligibleLoanAmountFoir);
    
 // aBlazeApplication.eligibleLoanAmountFoir = aBlazeApplication.eligibleLoanAmountFoir + eligibleLoanAmountFoir;
        aBlazeApplication.eligibleLoanAmountFoir = eligibleLoanAmountFoir;
        }// Added by Ankit
     } //added by Ankit
  print("----> aBlazeApplication.eligibleLoanAmountFoir :: " aBlazeApplication.eligibleLoanAmountFoir);
}

  print("++++> Exiting function :: fn_LAP_EligibleLoanAmountSalaried");
  print("");

}catch an Exception with {
  aBlazeApplication.fn_LAP_EligibileLoanAmountSalariedException = true;  
  print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}
]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='SD8WDD'>
    <instance ref='ParameterNameVH'>
     <value>message</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>Message</value>
    </instance>
   </item>
  </instance-list>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_EligibleLoanAmountSalaried1</value>
 </instance>
</instantiation>