<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_HL_AffordableScoreCard'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_HL_AffordableScoreCard1</value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_HL_AffordableScoreCard</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>void</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("");
print("++++> Entering function :: fn_HL_AffordableScoreCard");

aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;
scoreCardDetailArray is some array of ScoreCardDetail initially message.response.scoreCardDetails;

errType is a string initially "";
errId is a string initially "";
errName is a string initially "";
errAction is a string initially "";
errCode is a string initially "";
errText is a string initially "";
	 applicantSalType is a string initially "";
 	coApplicantSalType is a string initially "";

try {
if(aBlazeApplication.businessErrorsFlag = false) then {

 // print("----> Application Date :: "applicationDate);
      grossAnnualSalaryIncome  is a real initially 0;
  //	debug();
    print("----> Number of applicants :: "BTCommonVar.termInput.blazeApplication.blazeApplicantArray.count);
   for each BlazeApplicant  in  BTCommonVar.termInput.blazeApplication.blazeApplicantArray
  do {   
           if(it.applicantType=(ignoring case)"CoApp")then{
  		 print("---> Co- Applicant's GrossAnnualSalaryIncome :: "it.applicantAdditionalDetails.customerIndividualSalaried.grossAnnualSalaryIncome);
        if(grossAnnualSalaryIncome< it.applicantAdditionalDetails.customerIndividualSalaried.grossAnnualSalaryIncome) then
          grossAnnualSalaryIncome=it.applicantAdditionalDetails.customerIndividualSalaried.grossAnnualSalaryIncome;
           print("---> Computed Max GrossAnnualSalaryIncome :: "grossAnnualSalaryIncome);
     }
  }
     for each BlazeApplicant  in  BTCommonVar.termInput.blazeApplication.blazeApplicantArray such that (it.applicantType=(ignoring case)"CoApp")
  do {    
    if( grossAnnualSalaryIncome=it.applicantAdditionalDetails.customerIndividualSalaried.grossAnnualSalaryIncome) then{
             print("----> Co-Applicant's Type Of Salary :: " it.applicantAdditionalDetails.buffer5);    
      coApplicantSalType=it.applicantAdditionalDetails.buffer5;
    }
  }
  
  print("----> Number of applicants :: "BTCommonVar.termInput.blazeApplication.blazeApplicantArray.count);
   for each BlazeApplicant  in  BTCommonVar.termInput.blazeApplication.blazeApplicantArray
  do {    
          aBlazeApplicant is some BlazeApplicant initially it as a BlazeApplicant; 
  	  print("----> Applicant Type :: "aBlazeApplicant.applicantType);
     //Computation For Annual Income of all the Applicants
    print("----> aBlazeApplicant.applicantAdditionalDetails.additionalDetail.netAnnual :: " aBlazeApplicant.applicantAdditionalDetails.additionalDetail.netAnnual);
	netAnnualAllApplicants is a real initially 0;
    netAnnualAllApplicants = netAnnualAllApplicants + aBlazeApplicant.applicantAdditionalDetails.additionalDetail.netAnnual;  
    print("----> netAnnualAllApplicants :: " netAnnualAllApplicants);
      aBlazeApplication.finalMonthlyIncomeAllApplicant = netAnnualAllApplicants/12;
        print("----> finalMonthlyIncomeAllApplicant :: " aBlazeApplication.finalMonthlyIncomeAllApplicant);    
    
        if(aBlazeApplicant.applicantType=(ignoring case)"MainApp")then{
       print("----> Applicant's Age :: " aBlazeApplicant.age); 
          
       print("----> Applicant's Type Of Salary :: " aBlazeApplicant.applicantAdditionalDetails.buffer5);    
          applicantSalType=aBlazeApplicant.applicantAdditionalDetails.buffer5;
          
       aBlazeApplicant.sector=HL_SAL_Sector_To_Employer_Mapping(aBlazeApplicant);
       print("----> Applicant's Sector :: " aBlazeApplicant.sector);
    }

    
   salAffordableModelDecision is some NdScoreModelReturnInfo;
  salAffordableModelDecision=Salaried_Affordable_Score_Card_Instance(applicantSalType,coApplicantSalType,aBlazeApplicant);
       riskScore is a real initially 0; 
    riskScore=salAffordableModelDecision.score;

    aBlazeApplicant.riskScore=riskScore;
        print("SCORE--- >" aBlazeApplicant.riskScore);
      if(aBlazeApplicant.riskScore <> unknown) then {
            Affordable_Risk_Segment_Instance(aBlazeApplicant);      
        
        print("Customer Segemnt ---> "aBlazeApplicant.customerSegment);
          } 
    scoreCardCharacteristicsArray is some array of ScoreCardCharacteristicsDetail initially an array of ScoreCardCharacteristicsDetail;
          for each NdScoredCharacteristic in salAffordableModelDecision.scoredCharacteristics do {
            scoredCharacteristics  is  some  NdScoredCharacteristic  initially  it  as  a  NdScoredCharacteristic;
            scoreCardCharacteristicsDetail is some ScoreCardCharacteristicsDetail initially a ScoreCardCharacteristicsDetail;     
            //scoreCardCharacteristicsDetail.baselineScore = scoredCharacteristics.baselineScore as a string;
            //scoreCardCharacteristicsDetail.binLabel = scoredCharacteristics.binLabel;
            scoreCardCharacteristicsDetail.characteristicName = scoredCharacteristics.characteristicName;    
            scoreCardCharacteristicsDetail.characteristicValue =  scoredCharacteristics.binLabel;
            scoreCardCharacteristicsDetail.reasonCode = scoredCharacteristics.reasonCode as a string;
            scoreCardCharacteristicsDetail.partialScore = scoredCharacteristics.partialScore as a string;
            scoreCardCharacteristicsArray.append(scoreCardCharacteristicsDetail);
          }
    print("----> scoreCardCharacteristicsArray count :: " scoreCardCharacteristicsArray.count);
          print("----> Score card Name  :: " salAffordableModelDecision.scoreModelName);    
          // scoreCardDetail
          scoreCardDetail is some ScoreCardDetail initially a ScoreCardDetail;  
          if(scoreCardCharacteristicsArray <> unknown and scoreCardCharacteristicsArray <> null) then {
            scoreCardDetail.scoreCardCharacteristics = scoreCardCharacteristicsArray;
          }
          
          cardName is a string initially "";
      print("----> Score card Name  :: " salAffordableModelDecision.scoreModelName);    
	 print("Customer Segemnt ---> "aBlazeApplicant.customerSegment);
          cardName = portable().concat(salAffordableModelDecision.scoreModelName, "_");
          
          scoreCardDetail.scorecardName = portable().concat(cardName, aBlazeApplicant.customerSegment);      
     print("Final Score Card Name  ---> "scoreCardDetail.scorecardName);
          scoreCardDetail.scorecardScore = salAffordableModelDecision.score;
          scoreCardDetail.characteristicCount = salAffordableModelDecision.characteristicCount;
          scoreCardDetail.scorecardKey = "appScore";
          scoreCardDetail.purpose = "AutoPopulate";
          scoreCardDetail.entityType = aBlazeApplicant.applicantType;
          scoreCardDetail.entityId = aBlazeApplicant.customerCif as a string;  
          scoreCardDetailArray.append(scoreCardDetail);
}
}
}
catch an Exception with {
 // aBlazeApplication.fn_HL_AffordableScoreCard = true;  
  print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='18scto'>
    <instance ref='ParameterNameVH'>
     <value>message</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>Message</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>