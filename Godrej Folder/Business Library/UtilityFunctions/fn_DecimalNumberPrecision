<?xml version='1.0' encoding='UTF-8'?>
<instantiation xmlns='http://www.blazesoft.com/instantiation' template='Q8jH6kHdOYIZ1uG0WKXqvvejqv0' name='fn_DecimalNumberPrecision'>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='1VBfZr8g32Q2FnSWcWO9txQWwEE' name='Instance' id='Instance'>
 </instantiation>
 <instantiation xmlns='http://www.blazesoft.com/instantiation' template='18uqQPJXnTmKrAiLEOVcQMUAFmD' name='Entry' id='Entry'>
  <instance ref='Source Reference'>
   <instance ref='value'>
    <instance ref='locationVH'>
     <value></value>
    </instance>
    <instance ref='repositoryNameVH'>
     <value></value>
    </instance>
    <instance ref='versionVH'>
     <value></value>
    </instance>
    <instance ref='filterVH'>
     <value></value>
    </instance>
    <instance ref='releaseDateVH'>
     <value></value>
    </instance>
    <instance ref='repositoryAccessVH'>
     <value></value>
    </instance>
   </instance>
  </instance>
  <instance ref='Predictive Model Type'>
   <instance ref='value'>
    <value>NotApplicable</value>
   </instance>
  </instance>
 </instantiation>
 <instance ref='__ENTITY_PROPERTIES__VH__'>
  <instance ref='Test Role'>
   <instance ref='value'>
    <value>None</value>
   </instance>
  </instance>
  <instance ref='Test Case'>
   <instance ref='value'>
    <value></value>
   </instance>
  </instance>
 </instance>
 <instance ref='InstanceName'>
  <value></value>
 </instance>
 <instance ref='UniqueInstanceNameVH'>
  <value>fn_DecimalNumberPrecision1</value>
 </instance>
 <instance ref='FunctionNameVH'>
  <value>fn_DecimalNumberPrecision</value>
 </instance>
 <instance ref='FunctionReturnType'>
  <value>string</value>
 </instance>
 <instance ref='FunctionBodyVH'>
  <value><![CDATA[print("");
print("value123456"value);
value1 is a real initially 123.456;
print("value123456"value1);
value1 = value as a real;
value1 = math().round(value1*100)/100;
print("value2222---->"value1);
print("++++> Entering function :: fn_DecimalNumberPrecision");

aBlazeApplication is some BlazeApplication initially BTCommonVar.termInput.blazeApplication as a BlazeApplication;

preciseValue is a string initially "";

indexOfDecimal is an integer initially 0;
start is an integer initially 0;
end is an integer initially 0;
try {
  
  if(value.length()>0) then {
    indexOfDecimal = portable().findChar(value, "@.");
    if(0 = indexOfDecimal) then {
      preciseValue = portable().concat(value, ".00");
    } else {
      end = indexOfDecimal + precision;
      preciseValue = portable().subString(value, start, end);
    }
  }
  
  print("++++> Exiting function :: fn_DecimalNumberPrecision");
  print("");
  
} catch an Exception with {
  aBlazeApplication.fn_DecimalNumberPrecisionException= true;  
  print("\n***Exception :: \n>>@@@<<\n" evaluationException().toString()"\n>>@@@<<\n");  
}
return preciseValue;]]></value>
 </instance>
 <instance ref='CommentsVH'>
  <value></value>
 </instance>
 <instance ref='FunctionParametersVH'>
  <instance-list ref='ParametersVH'>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='HIDxpc'>
    <instance ref='ParameterNameVH'>
     <value>value</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>string</value>
    </instance>
   </item>
   <item template='DRNZKQyw5rcjBd4Yxo6FN649lWN.template1' id='aSU41I'>
    <instance ref='ParameterNameVH'>
     <value>precision</value>
    </instance>
    <instance ref='ParameterTypeVH'>
     <value>integer</value>
    </instance>
   </item>
  </instance-list>
 </instance>
</instantiation>